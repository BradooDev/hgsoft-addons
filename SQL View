 SELECT min(l.id) AS id,
    l.product_id,
    t.uom_id AS product_uom,
    sum(l.product_uom_qty / u.factor * u2.factor) AS product_uom_qty,
    sum(l.qty_delivered / u.factor * u2.factor) AS qty_delivered,
    sum(l.qty_invoiced / u.factor * u2.factor) AS qty_invoiced,
    sum(l.qty_to_invoice / u.factor * u2.factor) AS qty_to_invoice,
   count(*) AS nbr,
    s.name,
    s.date_order AS date,
    s.confirmation_date,
    s.state,
    s.partner_id,
    s.user_id,
    s.company_id,
    date_part('epoch'::text, avg(date_trunc('day'::text, s.date_order) - date_trunc('day'::text, s.create_date))) / (24 * 60 * 60)::numeric(16,2)::double precision AS delay,
    t.categ_id,
    s.pricelist_id,
    s.analytic_account_id,
    s.team_id,
    p.product_tmpl_id,
    partner.country_id,
    partner.commercial_partner_id,
    sum(p.weight * l.product_uom_qty / u.factor * u2.factor) AS weight,
    sum(p.volume * l.product_uom_qty::double precision / u.factor::double precision * u2.factor::double precision) AS volume,
    sum(l.price_total * (partner.royalties_percentage / 100.0)) AS royalties_to_pay,
    t.author as author,
    partner.name
    FROM sale_order_line l
     JOIN sale_order s ON l.order_id = s.id
     JOIN res_partner partner ON s.partner_id = partner.id
     LEFT JOIN product_product p ON l.product_id = p.id
     LEFT JOIN product_template t ON p.product_tmpl_id = t.id
     LEFT JOIN product_uom u ON u.id = l.product_uom
     LEFT JOIN product_uom u2 ON u2.id = t.uom_id
     LEFT JOIN product_pricelist pp ON s.pricelist_id = pp.id
    WHERE t.author IS NOT NULL
  GROUP BY l.product_id, l.order_id, t.uom_id, t.categ_id, s.name, s.date_order, s.confirmation_date, s.partner_id, s.user_id, s.state, s.company_id, s.pricelist_id, s.analytic_account_id, s.team_id, p.product_tmpl_id, partner.country_id, partner.commercial_partner_id, author, partner.name; 
  ----------------------------------------------------------------
  SELECT sub.id,
    sub.son,
    sub.soi,
    sub.soln,
    sub.solps,
    sub.date,
    sub.product_id,
    sub.partner_id,
    sub.country_id,
    sub.account_analytic_id,
    sub.payment_term_id,
    sub.uom_name,
    sub.currency_id,
    sub.journal_id,
    sub.fiscal_position_id,
    sub.user_id,
    sub.company_id,
    sub.nbr,
    sub.type,
    sub.state,
    sub.categ_id,
    sub.date_due,
    sub.account_id,
    sub.account_line_id,
    sub.partner_bank_id,
    sub.product_qty,
    sub.price_total,
    sub.price_average,
    sub.residual,
    sub.commercial_partner_id
   FROM ( SELECT ail.id,
            ai.date_invoice AS date,
            sol.product_id,
            ai.partner_id,
            ai.payment_term_id,
            ail.account_analytic_id,
            u2.name AS uom_name,
            ai.currency_id,
            ai.journal_id,
            ai.fiscal_position_id,
            ai.user_id,
            ai.company_id,
            1 AS nbr,
            ai.type,
            ai.state,
            pt.categ_id,
            ai.date_due,
            ai.account_id,
            ail.account_id AS account_line_id,
            ai.partner_bank_id,
            sum(invoice_type.sign::numeric * ail.quantity / u.factor * u2.factor) AS product_qty,
            sum(ail.price_subtotal_signed * invoice_type.sign::numeric) AS price_total,
            sum(abs(ail.price_subtotal_signed)) /
                CASE
                    WHEN sum(ail.quantity / u.factor * u2.factor) <> 0::numeric THEN sum(ail.quantity / u.factor * u2.factor)
                    ELSE 1::numeric
                END AS price_average,
            ai.residual_company_signed / (( SELECT count(*) AS count
                   FROM account_invoice_line l
                  WHERE l.invoice_id = ai.id))::numeric * count(*)::numeric * invoice_type.sign::numeric AS residual,
            ai.commercial_partner_id,
            partner.country_id,
            so.name AS son,
            so.id AS soi,
            sol.name AS soln,
            sol.price_subtotal AS solps
           FROM account_invoice_line ail
             JOIN account_invoice ai ON ai.id = ail.invoice_id
             JOIN res_partner partner ON ai.commercial_partner_id = partner.id
             JOIN sale_order so ON ai.origin::text = so.name::text
             JOIN sale_order_line sol ON so.id = sol.order_id
             LEFT JOIN product_product pr ON pr.id = sol.product_id
             LEFT JOIN product_template pt ON pt.id = pr.product_tmpl_id
             LEFT JOIN product_uom u ON u.id = ail.uom_id
             LEFT JOIN product_uom u2 ON u2.id = pt.uom_id
             JOIN ( SELECT ai_1.id,
                        CASE
                            WHEN ai_1.type::text = ANY (ARRAY['in_refund'::character varying::text, 'in_invoice'::character varying::text]) THEN '-1'::integer
                            ELSE 1
                        END AS sign
                   FROM account_invoice ai_1) invoice_type ON invoice_type.id = ai.id
          WHERE sol.is_downpayment = false and ai.state = 'paid'
          GROUP BY ail.id, sol.product_id, ail.account_analytic_id, ai.date_invoice, ai.id, ai.partner_id, ai.payment_term_id, u2.name, u2.id, ai.currency_id, ai.journal_id, ai.fiscal_position_id, ai.user_id, ai.company_id, ai.type, invoice_type.sign, ai.state, pt.categ_id, ai.date_due, ai.account_id, ail.account_id, ai.partner_bank_id, ai.residual_company_signed, ai.amount_total_company_signed, ai.commercial_partner_id, partner.country_id, so.name, so.id, sol.name, sol.price_subtotal) sub